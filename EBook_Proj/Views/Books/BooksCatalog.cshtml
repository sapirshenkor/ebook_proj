@model EBook_Proj.Models.HomePageBooksViewModel

@{
    ViewData["Title"] = "Books Catalog";
}

@await Html.PartialAsync("_SearchPartial", Model)
<!-- Book Details Modal -->
@await Html.PartialAsync("_BookDetailsModal")

<div class="container mt-4">
    <h1 class="mb-4">Books Catalog</h1>

    <div id="booksContainer">
        @if (Model.FeaturedBooks != null && Model.FeaturedBooks.Any())
        {
            <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
                @foreach (var book in Model.FeaturedBooks)
                {
                    <div class="col-md-1">
                        <div class="card h-100 shadow-sm">
                            <div class="card book-card hover-pointer"
                                 data-book-details
                                 data-id="@book.BookID"
                                 data-title="@book.Title"
                                 data-author="@book.Author"
                                 data-description="@book.Description"
                                 data-buy-price="@book.BuyingPrice"
                                 data-borrow-price="@book.BorrowPrice"
                                 data-genre="@book.Genre"
                                 data-pubdate="@book.PublicationDate.ToString("dd/MM/yyyy")"
                                 data-cover="@book.BookCover">
                                @if (!string.IsNullOrEmpty(book.BookCover))
                                {
                                    <img src="@book.BookCover" class="card-img-top book-image" alt="@book.Title" style="height: 300px; object-fit: cover;">
                                }
                                else
                                {
                                    <div class="text-center p-3 bg-light">
                                        <i class="bi bi-book" style="font-size: 2rem;"></i>
                                    </div>
                                }
                                <div class="card-body">
                                    <h5 class="card-title">@book.Title</h5>
                                    <div class="mb-2">
                                        <small class="text-muted">
                                            <div>Genre: @book.Genre</div>
                                        </small>
                                    </div>
                                    @if (!string.IsNullOrEmpty(book.Description))
                                    {
                                        <p class="card-text">@(book.Description.Length > 150 ? book.Description.Substring(0, 147) + "..." : book.Description)</p>
                                    }
                                    <div class="d-flex flex-column">
                                        <div class="mb-2">
                                            <span class="badge bg-primary me-2">Buy: $@book.BuyingPrice.ToString("F2")</span>
                                            <span class="badge bg-success">Borrow: $@book.BorrowPrice.ToString("F2")</span>
                                        </div>
                                        @if (book.AgeLimit > 0)
                                        {
                                            <div class="mb-2">
                                                <span class="badge bg-warning text-dark">Age @book.AgeLimit+</span>
                                            </div>
                                        }
                                        <div class="d-flex justify-content-between align-items-center">
                                            <small class="text-muted">Available Copies: @book.BorrowCount</small>
                                            <div class="btn-group">
                                                <a asp-action="BookDetails" asp-route-id="@book.BookID" class="btn btn-sm btn-outline-primary">Details</a>
                                                @if (book.BorrowCount > 0)
                                                {
                                                    <a class="btn btn-sm btn-success add-to-cart"
                                                       data-id="@book.BookID"
                                                       data-title="@book.Title"
                                                       data-buy-price="@book.BuyingPrice"
                                                       data-borrow-price="@book.BorrowPrice"
                                                       data-cover="@book.BookCover"
                                                       data-type="borrow">Borrow</a>
                                                }
                                                <a class="btn btn-sm btn-primary add-to-cart" 
                                                   data-id="@book.BookID"
                                                   data-title="@book.Title"
                                                   data-buy-price="@book.BuyingPrice"
                                                   data-borrow-price="@book.BorrowPrice"
                                                   data-cover="@book.BookCover"
                                                   data-type="buy">>Buy</a>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="alert alert-info" role="alert">
                No books are currently available in the catalog.
            </div>
        }
    </div>
</div>


@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        
        document.addEventListener('DOMContentLoaded', () => {
            if (isUserLoggedIn()){
                cartService.updateCartCount();    
            }
            
        });
        // Clear existing modal instances when navigating back
        window.onunload = function() {
            const modal = document.getElementById('bookDetailsModal');
            if (modal) {
                const bsModal = bootstrap.Modal.getInstance(modal);
                if (bsModal) bsModal.dispose();
            }
        };

        // Prevent modal from showing on back navigation
        window.onpageshow = function(event) {
            if (event.persisted) {
                const modal = document.getElementById('bookDetailsModal');
                if (modal) modal.classList.remove('show');
                document.body.classList.remove('modal-open');
                const backdrop = document.querySelector('.modal-backdrop');
                if (backdrop) backdrop.remove();
            }
        };
        $(document).ready(function () {
            let searchTimer;
            const MIN_CHARS = 2;

            // Function to attach modal event listeners
            function attachBookDetailsListeners() {
                document.querySelectorAll('[data-book-details]').forEach(card => {
                    card.addEventListener('click', function() {
                        const dataset = this.dataset;
                        showBookDetails(
                            dataset.id,
                            dataset.title,
                            dataset.author,
                            dataset.description,
                            dataset.buyPrice,
                            dataset.borrowPrice,
                            dataset.genre,
                            dataset.pubdate,
                            dataset.cover
                        );
                    });
                });
            }

            

            function performSearch(additionalParams = {}) {
                const searchString = $('#searchString').val().trim();
                const genre = $('#genre').val() || $('#genreFilter').val();
                const priceSort = $('#priceSort').val();
                const yearSort = $('#yearSort').val();
                const author=$('#author').val()|| $('#authorFilter').val();
                const minPrice = $('#minPrice').val();
                const maxPrice = $('#maxPrice').val();

                if (searchString === '' || searchString.length >= MIN_CHARS) {
                    let newUrl = '@Url.Action("BooksCatalog", "Books")';
                    let params = new URLSearchParams();

                    if (searchString) params.append('searchString', searchString);
                    if (genre) params.append('genre', genre);
                    if (priceSort) params.append('priceSort', priceSort);
                    if (yearSort) params.append('yearSort', yearSort);
                    if (author) params.append('author', author);
                    if (minPrice) params.append('minPrice', minPrice);
                    if (maxPrice) params.append('maxPrice', maxPrice);

                    // Add any additional parameters
                    Object.keys(additionalParams).forEach(key => {
                        params.append(key, additionalParams[key]);
                    });

                    if (params.toString()) {
                        newUrl += '?' + params.toString();
                    }

                    window.history.pushState({}, '', newUrl);

                    $.get(newUrl)
                        .done(function(response) {
                            const parser = new DOMParser();
                            const doc = parser.parseFromString(response, 'text/html');
                            const booksContainer = doc.querySelector('#booksContainer').innerHTML;
                            $('#booksContainer').html(booksContainer);
                            // Reattach event listeners after content update
                            attachBookDetailsListeners();
                        })
                        .fail(function() {
                            console.error('Search failed');
                        });
                }
            }

            // Search input handler
            $('#searchString').on('input', function() {
                clearTimeout(searchTimer);
                searchTimer = setTimeout(performSearch, 1000);
            });

            // Genre select handler
            $('#genre, #genreFilter').on('change', function() {
                performSearch();
            });

            // Author select handler
            $('#author, #authorFilter').on('change', function() {
                performSearch();
            });

            // Price sort handler
            $('#priceSort').on('change', function() {
                performSearch();
            });

            // Year sort handler
            $('#yearSort').on('change', function() {
                performSearch();
            });
            // Price range handler
            $('#minPrice, #maxPrice').on('change', function() {
                performSearch();
            });

            // Reset filters
            $('#resetFilters').click(function() {
                $('#priceSort').val('');
                $('#genre').val('');
                $('#yearSort').val('');
                $('#author').val('');
                $('#minPrice').val('');
                $('#maxPrice').val('');
                performSearch();
            });

            // Set initial values from URL
            const urlParams = new URLSearchParams(window.location.search);
            $('#priceSort').val(urlParams.get('priceSort') || '');
            $('#genreFilter').val(urlParams.get('genre') || '');
            $('#yearSort').val(urlParams.get('yearSort') || '');
            $('#authorFilter').val(urlParams.get('author') || '');
            $('#minPrice').val(urlParams.get('minPrice') || '');
            $('#maxPrice').val(urlParams.get('maxPrice') || '');
        });

        

        

        function addToCart(bookId, title, buyPrice, borrowPrice, cover, type) {
            if (!isUserLoggedIn()) {
                window.location.href = '/User/Login';
                return;
            }

            cartService.addToCart({
                id: bookId,
                title: title,
                buyPrice: buyPrice,
                borrowPrice: borrowPrice,
                cover: cover
            }, type);
            
        }
        document.querySelectorAll('.add-to-cart').forEach(button => {
            button.addEventListener('click', function() {
                event.stopPropagation();
                const data = this.dataset;
                addToCart(
                    data.id,
                    data.title,
                    data.buyPrice,
                    data.borrowPrice,
                    data.cover,
                    data.type
                );
            });
        });
    
    
    </script>
}